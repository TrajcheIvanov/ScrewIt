@model ScrewIt.ViewModels.OrderCreateModel

@{
    ViewBag.Title = "Create-Order";
}

<h1>Dimensions List </h1>

@*<form asp-controller="Orders" asp-action="Create" method="post">
    <div asp-validation-summary="All" class="text-danger"></div>
    <div class="form-group">
        <label class="control-label" asp-for="Material">Material</label>
        <input type="text" asp-for="Material" class="form-control" required placeholder="Please enter material" />
        <span asp-validation-for="Material" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label class="control-label" asp-for="Username">Username</label>
        <input type="text" asp-for="Username" class="form-control" required placeholder="Please enter Username" />
        <span asp-validation-for="Username" class="text-danger"></span>
    </div>
</form>*@
<div class="container">
    <div class="row">
        <div class="col col-6">
            <label class="control-label" asp-for="Material">Material</label>
            <input type="text" asp-for="Material" class="form-control" required placeholder="Please enter material" id="Material"/>
        </div>
        <div class="col col-6">
            <label class="control-label" asp-for="Username">Username</label>
            <input type="text" asp-for="Username" class="form-control" required placeholder="Please enter Username" id="Username"/>
        </div>
        <div class="col p-3 d-flex justify-content-between">
            <button type="button" class="btn btn-outline-success btn-lg" onclick="makeOrder()">Make order</button>
            <button type="button" class="btn btn-outline-danger btn-lg" onclick="clearDimensionList()">Clear dimension list</button>
        </div>
    </div>
</div>

<table class="table table-dark">
    <thead>
        <tr class="text-center">
            <th scope="col" rowspan="2">No.</th>
            <th scope="col" rowspan="2">1st Dimension</th>
            <th scope="col" rowspan="2">2nd Dimension</th>
            <th scope="col" rowspan="2">Quantity</th>
            <th scope="col" rowspan="2">Rotation</th>
            <th scope="col" colspan="2">1st Dimension</th>
            <th scope="col" colspan="2">2nd Dimension</th>
            <th scope="col" rowspan="2">Additional</th>
            <th scope="col" rowspan="2"></th>
        </tr>
        
        <tr>
            <th scope="col">1st Edge</th>
            <th scope="col">2nd Edge</th>
            <th scope="col">1st Edge</th>
            <th scope="col">2nd Edge</th>
        </tr>
    </thead>
    <tbody id="dimensionList">
        <tr class="Adding" onkeydown="if(event.keyCode==13) addDimension()">
            <th id="number"></th>
            <td id="FirstDimension"><input type="text" class="form-control" required /></td>
            <td id="SecondDimension"><input type="text" class="form-control" required /></td>
            <td id="Quantity"><input type="text" class="form-control" required /></td>
            <td id="Rotation"><input type="text" class="form-control" /></td>
            <td id="FirstDimensionFE"><input type="text" class="form-control" /></td>
            <td id="FirstDimensionSE"><input type="text" class="form-control" /></td>
            <td id="SecondDimensionFE"><input type="text" class="form-control" /></td>
            <td id="SecondDimensionSE"><input type="text" class="form-control" /></td>
            <td id="Additional"><input type="text" class="form-control" /></td>
            <td><button class="btn btn-success" onclick="addDimension()">Add</button></td>
        </tr>
    </tbody>
</table>



@section Scripts{
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script>
        var nextId = 1;

        if (localStorage["nextId"] == undefined) {
            nextId = 1;
        } else {
            nextId = parseInt(localStorage.getItem("nextId"));
        }


        function addDimension() {
            var dimensionList = document.getElementById("dimensionList");

            var currentId = nextId;
            nextId += 1;

            var rowToAppend = document.createElement("tr");
            rowToAppend.setAttribute("class", "Dimension");
            rowToAppend.id = currentId;

            var colOneToAppend = document.createElement("th");
            colOneToAppend.innerHTML = currentId;
           
            var firstDimensionToAppend = document.createElement("td");
            var firstDimension = document.getElementById("FirstDimension").firstChild.value;
            firstDimensionToAppend.innerHTML = firstDimension;

            var secondDimensionToAppend = document.createElement("td");
            var secondDimension = document.getElementById("SecondDimension").firstChild.value;
            secondDimensionToAppend.innerHTML = secondDimension;

            var quantityToAppend = document.createElement("td");
            var quantity = document.getElementById("Quantity").firstChild.value;
            quantityToAppend.innerHTML = quantity;

            var rotationToAppend = document.createElement("td");
            var rotation = document.getElementById("Rotation").firstChild.value;
            rotationToAppend.innerHTML = rotation;

            var firstDimensionFEToAppend = document.createElement("td");
            var firstDimensionFE = document.getElementById("FirstDimensionFE").firstChild.value;
            firstDimensionFEToAppend.innerHTML = firstDimensionFE;

            var firstDimensionSEToAppend = document.createElement("td");
            var firstDimensionSE = document.getElementById("FirstDimensionSE").firstChild.value;
            firstDimensionSEToAppend.innerHTML = firstDimensionSE;

            var secondDimensionFEToAppend = document.createElement("td");
            var secondDimensionFE = document.getElementById("SecondDimensionFE").firstChild.value;
            secondDimensionFEToAppend.innerHTML = secondDimensionFE;

            var secondDimensionSEToAppend = document.createElement("td");
            var secondDimensionSE = document.getElementById("SecondDimensionSE").firstChild.value;
            secondDimensionSEToAppend.innerHTML = secondDimensionSE;

            var additionalToAppend = document.createElement("td");
            var additional = document.getElementById("Additional").firstChild.value;
            additionalToAppend.innerHTML = additional;

            var editToAppend = document.createElement("td");
            var buttonGroup = document.createElement("div");
            buttonGroup.classList = ("btn-group");
            buttonGroup.setAttribute("role", "group");
            var editButton = document.createElement("button");
            editButton.classList = ("btn btn-warning");
            editButton.innerHTML = "Edit";
            editButton.setAttribute("type", "button");
            editButton.onclick = function () { editDimension(currentId) };
            var deleteButton = document.createElement("button");
            deleteButton.classList = ("btn btn-danger");
            deleteButton.innerHTML = "Delete";
            deleteButton.setAttribute("type", "button");
            deleteButton.onclick = function () { deleteDimension(currentId) };

            buttonGroup.appendChild(editButton);
            buttonGroup.appendChild(deleteButton);
            editToAppend.appendChild(buttonGroup);

            rowToAppend.appendChild(colOneToAppend);
            rowToAppend.appendChild(firstDimensionToAppend);
            rowToAppend.appendChild(secondDimensionToAppend);
            rowToAppend.appendChild(quantityToAppend);
            rowToAppend.appendChild(rotationToAppend);
            rowToAppend.appendChild(firstDimensionFEToAppend);
            rowToAppend.appendChild(firstDimensionSEToAppend);
            rowToAppend.appendChild(secondDimensionFEToAppend);
            rowToAppend.appendChild(secondDimensionSEToAppend);
            rowToAppend.appendChild(additionalToAppend);
            rowToAppend.appendChild(editToAppend);

            

            dimensionList.append(rowToAppend);

            var dimension = {
                "FirstDimension": firstDimension,
                "SecondDimension": secondDimension,
                "Quantity": quantity,
                "Rotation": rotation,
                "FirstDimensionFE": firstDimensionFE,
                "FirstDimensionSE": firstDimensionSE,
                "SecondDimensionFE": secondDimensionFE,
                "SecondDimensionSE": secondDimensionSE,
                "Additional": additional,
            };

            localStorage.setItem(nextId - 1, JSON.stringify(dimension));
            localStorage.setItem("nextId", nextId);

            clearInserDimension();

            addInsertDimension(localStorage.length);

        }

        function clearInserDimension() {
            var insertDimension = document.getElementsByClassName("Adding");
            for (let i = 0; i < insertDimension.length; i++) {
                insertDimension[i].innerHTML = null;
            }
        } https://script.dotmetrics.net/Images/dotmetrics_splash.png

        function addInsertDimension(id) {
            var dimensionList = document.getElementById("dimensionList");

            var rowToAppend = document.createElement("tr");
            rowToAppend.setAttribute("class", "Adding");
            rowToAppend.setAttribute("onkeydown", "if(event.keyCode==13) addDimension()");

            var colToAppend = document.createElement("th");
            colToAppend.setAttribute("id", nextId);
            colToAppend.innerHTML = nextId;

            rowToAppend.appendChild(colToAppend);

            rowToAppend.innerHTML +=
                '<td id="FirstDimension"><input type="text" class="form-control" required /> </td>' +
                '<td id="SecondDimension"><input type="text" class="form-control" required /></td>' +
                '<td id="Quantity"><input type="text" class="form-control" required /></td>' +
                '<td id="Rotation"><input type="text" class="form-control"  /></td>' +
                '<td id="FirstDimensionFE"><input type="text" class="form-control"  /></td>' +
                '<td id="FirstDimensionSE"><input type="text" class="form-control"  /></td>' +
                '<td id="SecondDimensionFE"><input type="text" class="form-control"  /></td>' +
                '<td id="SecondDimensionSE"><input type="text" class="form-control"  /></td>' +
                '<td id="Additional"><input type="text" class="form-control"  /></td>' +
                '<td>' + '<button class="btn btn-success" onclick="addDimension()">Add</button>' + '</td>';

            dimensionList.append(rowToAppend);
        }

        function editDimension(id) {
            var dimensionForEdit = JSON.parse(localStorage.getItem(id));

            var rowForEdit = document.getElementById(id);

            var colToAppend = document.createElement("th");
            colToAppend.setAttribute("id", "editNumber");
            colToAppend.innerHTML = id;

            rowForEdit.innerHTML = null;

            rowForEdit.appendChild(colToAppend);

            rowForEdit.innerHTML +=
                '<td id="FirstDimension">' + '<input type="text" class="form-control" required value=' + dimensionForEdit.FirstDimension + ' />' +
                '<td id="SecondDimension"><input type="text" class="form-control" required value=' + dimensionForEdit.SecondDimension + ' /></td>' +
                '<td id="Quantity"><input type="text" class="form-control" required value=' + dimensionForEdit.Quantity + ' /></td>' +
                '<td id="Rotation"><input type="text" class="form-control" value=' + dimensionForEdit.Rotation + '  /></td>' +
                '<td id="FirstDimensionFE"><input type="text" class="form-control"  value=' + dimensionForEdit.FirstDimensionFE + ' /></td>' +
                '<td id="FirstDimensionSE"><input type="text" class="form-control"  value=' + dimensionForEdit.FirstDimensionSE + ' /></td>' +
                '<td id="SecondDimensionFE"><input type="text" class="form-control"  value=' + dimensionForEdit.SecondDimensionFE + ' /></td>' +
                '<td id="SecondDimensionSE"><input type="text" class="form-control" value=' + dimensionForEdit.SecondDimensionSE + '  /></td>' +
                '<td id="Additional"><input type="text" class="form-control"  value=' + dimensionForEdit.Additional + ' /></td>' +
                '</td>' + '<td>' + '<button class="btn btn-primary" onclick="saveEditedDimension(' + id + ')">Save</button>' + '</td>';


            clearInserDimension();
        }

        function saveEditedDimension(id) {

            var dimension = {
                "FirstDimension": document.getElementById("FirstDimension").firstChild.value,
                "SecondDimension": document.getElementById("SecondDimension").firstChild.value,
                "Quantity": document.getElementById("Quantity").firstChild.value,
                "Rotation": document.getElementById("Rotation").firstChild.value,
                "FirstDimensionFE": document.getElementById("FirstDimensionFE").firstChild.value,
                "FirstDimensionSE": document.getElementById("FirstDimensionSE").firstChild.value,
                "SecondDimensionFE": document.getElementById("SecondDimensionFE").firstChild.value,
                "SecondDimensionSE": document.getElementById("SecondDimensionSE").firstChild.value,
                "Additional": document.getElementById("Additional").firstChild.value,
            };

            localStorage.setItem(id, JSON.stringify(dimension));

            updateEditRow(id);
        }

        function updateEditRow(id) {
            var dimensionForEdit = JSON.parse(localStorage.getItem(id));

            var rowForEdit = document.getElementById(id);

            var colToAppend = document.createElement("th");
            colToAppend.setAttribute("id", id);
            colToAppend.innerHTML = id;

            rowForEdit.innerHTML = null;

            rowForEdit.appendChild(colToAppend);

            rowForEdit.innerHTML +=
                '<td> ' + dimensionForEdit.FirstDimension.replace("/","") + ' </td>' +
                '<td> ' + dimensionForEdit.SecondDimension.replace("/","")  + ' </td>' +
                '<td> ' + dimensionForEdit.Quantity.replace("/","")  + ' </td>' +
                '<td> ' + dimensionForEdit.Rotation.replace("/","")  + ' </td>' +
                '<td> ' + dimensionForEdit.FirstDimensionFE.replace("/","")  + ' </td>' +
                '<td> ' + dimensionForEdit.FirstDimensionSE.replace("/","")  + ' </td>' +
                '<td> ' + dimensionForEdit.SecondDimensionFE.replace("/","")  + ' </td>' +
                '<td> ' + dimensionForEdit.SecondDimensionSE.replace("/","")  + ' </td>' +
                '<td> ' + dimensionForEdit.Additional.replace("/","")  + ' </td>' +
                '<td>' + '<div class="btn-group" role="group">' +
                '<button class="btn btn-warning" type="button" onclick="editDimension(' + id + ')">Edit</button>' + 
                '<button class="btn btn-danger" type="button"  onclick="deleteDimension(' + id + ')">Delete</button>' + 
                '</div>' + '</td>';

            addInsertDimension(nextId);
        }

        function deleteDimension(id) {

            var x = confirm("Are you sure you want to delete?");

            if (x) {
                localStorage.removeItem(id);
                var rowForEdit = document.getElementById(id);
                rowForEdit.innerHTML = null;
                console.log("dimensions with id: " + id + " was removed")
            } else {
                console.log("dimensions with id: " + id + " was not removed")
            }

        }

        function clearDimensionList() {
                localStorage.clear();
                var insertDimension = document.getElementsByClassName("Dimension");
                for (let i = 0; i < insertDimension.length; i++) {
                    insertDimension[i].innerHTML = null;
                }
                console.log("Dimension list cleared")
        }

        window.onload = function () {
            console.log("page was loaded");

            var dimensionList = document.getElementById("dimensionList");

            if (localStorage.length > 0) {
                console.log("local storage is not empty");

                for (let i = parseInt(localStorage.getItem("nextId")); i > 0; i--){
                   
                    console.log("i = " +  i)
                    var KeyName = window.localStorage.key(i);
                    console.log(KeyName);
                    var dimensionForEdit = JSON.parse(localStorage.getItem(i));

                    if (i == parseInt(localStorage.getItem("nextId")) || localStorage[i] == undefined) {
                        continue;
                    } else {
                        var rowForEdit = document.createElement("tr");
                        rowForEdit.setAttribute("id", i);

                        var colToAppend = document.createElement("th");
                        colToAppend.setAttribute("id", i);
                        colToAppend.innerHTML = i;

                        rowForEdit.appendChild(colToAppend);

                        rowForEdit.innerHTML +=
                            '<td> ' + dimensionForEdit.FirstDimension.replace("/", "") + ' </td>' +
                            '<td> ' + dimensionForEdit.SecondDimension.replace("/", "") + ' </td>' +
                            '<td> ' + dimensionForEdit.Quantity.replace("/", "") + ' </td>' +
                            '<td> ' + dimensionForEdit.Rotation.replace("/", "") + ' </td>' +
                            '<td> ' + dimensionForEdit.FirstDimensionFE.replace("/", "") + ' </td>' +
                            '<td> ' + dimensionForEdit.FirstDimensionSE.replace("/", "") + ' </td>' +
                            '<td> ' + dimensionForEdit.SecondDimensionFE.replace("/", "") + ' </td>' +
                            '<td> ' + dimensionForEdit.SecondDimensionSE.replace("/", "") + ' </td>' +
                            '<td> ' + dimensionForEdit.Additional.replace("/", "") + ' </td>' +
                            '<td>' + '<div class="btn-group" role="group">' +
                            '<button class="btn btn-warning" type="button" onclick="editDimension(' + i + ')">Edit</button>' +
                            '<button class="btn btn-danger" type="button"  onclick="deleteDimension(' + i + ')">Delete</button>' +
                            '</div>' + '</td>';

                        dimensionList.prepend(rowForEdit);
                    }

                }

            } else {
                console.log("local storage is empty");
            }
        }

        function makeOrder() {
            var materialInput = document.getElementById("Material");
            var material = materialInput.value;

            var usernameInput = document.getElementById("Username");
            var username = usernameInput.value;

            console.log(`User: ${username} ordered the Material: ${material} `)

            if (material != null && material.trim() != "" && username != null && username.trim() != "") {
                var data = {
                    Username: username,
                    Material: material,
                }

                var url = "https://localhost:44314/Orders/Create";

                axios.post(url, data)
                    .then(function (response) {
                        materialInput.value = "";
                        usernameInput.value = "";
                        console.log(response.data.id);
                        let dimensionsToSend = dimensionsArrayForPost(response.data.id);
                        sendLocalStorageDimensionToServer(dimensionsToSend);
                        clearDimensionList(); 

                    })
                    .catch(function (error) {
                        console.log(error);
                    })

            } else {
                alert("Material & Username field must be filled");
            }

        }

        function sendLocalStorageDimensionToServer(dimensionsToSend) {
            axios
                .all(dimensionsToSend)
                .then(axios.spread((...responses) => {
                    responses.forEach(res => console.log('Success'))
                    console.log('submitted all axios calls');
                }))
                .catch(error => { })
        }


        function dimensionsArrayForPost(orderId) {
            let axiosArray = []

            for (let i = parseInt(localStorage.getItem("nextId")); i > 0; i--) {

                var dimensionForEdit = JSON.parse(localStorage.getItem(i));

                if (i == parseInt(localStorage.getItem("nextId")) || localStorage[i] == undefined) {
                    continue;
                } else {

                    var postData = {
                        FirstDimension: parseInt(dimensionForEdit.FirstDimension),
                        SecondDimension: parseInt(dimensionForEdit.SecondDimension),
                        Quantity: parseInt(dimensionForEdit.Quantity),
                        Rotation: false,
                        FirstDimFirstEdge: 0,
                        FirstDimSecondEdge: 0,
                        SecondDimFirstEdge: 0,
                        SecondDimSecondEdge: 0,
                        AdditionalProcessing: dimensionForEdit.Additional.replace("/", ""),
                        OrderId: orderId
                    }

                    var firstFirst = parseInt(dimensionForEdit.FirstDimensionFE);
                    if (!isNaN(firstFirst)) {
                        postData.FirstDimFirstEdge = firstFirst;
                    }

                    var firstSecond = parseInt(dimensionForEdit.FirstDimensionSE);
                    if (!isNaN(firstSecond)) {
                        postData.FirstDimSecondEdge = firstSecond;
                    }

                    var secondFirst = parseInt(dimensionForEdit.SecondDimensionFE);
                    if (!isNaN(secondFirst)) {
                        postData.SecondDimFirstEdge = secondFirst;
                    }

                    var secondSecond = parseInt(dimensionForEdit.SecondDimensionSE);
                    if (!isNaN(secondSecond)) {
                        postData.SecondDimSecondEdge = secondSecond;
                    }

                    var toRotate = parseInt(dimensionForEdit.Rotation);
                    if (toRotate == 1) {
                        postData.Rotation = true;
                    }

                    let url = "https://localhost:44314/Dimension/Create";

                    //let newPromise = axios.post(url, postData);

                    let newPromise = axios({
                        method: 'post',
                        url: "https://localhost:44314/Dimension/Create",
                        data: postData
                    })

                    axiosArray.push(newPromise);
                }

            }


            return axiosArray;
        }

        function testDimensionPost() {
            var dimensionForEdit = JSON.parse(localStorage.getItem("1"));


            var postData = {
                FirstDimension: parseInt(dimensionForEdit.FirstDimension),
                SecondDimension: parseInt(dimensionForEdit.SecondDimension),
                Quantity: parseInt(dimensionForEdit.Quantity),
                Rotation: false,
                FirstDimFirstEdge: 0,
                FirstDimSecondEdge: 0,
                SecondDimFirstEdge: 0,
                SecondDimSecondEdge: 0,
                AdditionalProcessing: dimensionForEdit.Additional.replace("/", ""),
                OrderId: 5
            }

            var firstFirst = parseInt(dimensionForEdit.FirstDimensionFE);
            if (!isNaN(firstFirst)) {
                postData.FirstDimFirstEdge = firstFirst;
            }

            var firstSecond = parseInt(dimensionForEdit.FirstDimensionSE);
            if (!isNaN(firstSecond)) {
                postData.FirstDimSecondEdge = firstSecond;
            }

            var secondFirst = parseInt(dimensionForEdit.SecondDimensionFE);
            if (!isNaN(secondFirst)) {
                postData.SecondDimFirstEdge = secondFirst;
            }

            var secondSecond = parseInt(dimensionForEdit.SecondDimensionSE);
            if (!isNaN(secondSecond)) {
                postData.SecondDimSecondEdge = secondSecond;
            }

            var toRotate = parseInt(dimensionForEdit.Rotation);
            if (toRotate == 1) {
                postData.Rotation = true;
            }

            console.log(postData);

            var url = "https://localhost:44314/Dimension/Create";

            axios.post(url, postData)
                .then(function (response) {
                    console.log(response);
                })
                .catch(function (error) {
                    console.log(error);
                })

            
        }

    </script>
}

